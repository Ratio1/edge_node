
import requests

class _WebTestsMixin:
  """
  Mixin class providing web vulnerability testing capabilities.
  """

  def _web_test_one(self, target, port):
    """
    Execute web vulnerability tests against the target.
    
    TODO:
     - encode results for `_run_web_tests` caller
    """
    scheme = "https" if port in (443, 8443) else "http"
    base_url = f"{scheme}://{target}"
    if port not in (80, 443):
      base_url = f"{scheme}://{target}:{port}"
    try:
      # Check common sensitive endpoints
      for path in ["/robots.txt", "/.env", "/.git/", "/admin", "/login"]:
        url = base_url + path
        resp = requests.get(url, timeout=2, verify=False)
        if resp.status_code == 200:
          self.logger(f"[{target}] Accessible resource at {url} (200 OK).")
        elif resp.status_code in (401, 403):
          self.logger(f"[{target}] Protected resource {url} (status {resp.status_code}).")
      # Check homepage for leaked info
      resp_main = requests.get(base_url, timeout=3, verify=False)
      text = resp_main.text[:10000]
      for marker in ["API_KEY", "PASSWORD", "SECRET", "BEGIN RSA PRIVATE KEY"]:
        if marker in text:
          self.logger(f"[{target}] Sensitive '{marker}' found on {base_url}.")
      # Basic XSS reflection test
      payload = "<script>alert(1)</script>"
      test_url = base_url.rstrip("/") + f"/{payload}"
      resp_test = requests.get(test_url, timeout=3, verify=False)
      if payload in resp_test.text:
        self.logger(f"[{target}] VULNERABLE: Reflected XSS at {test_url}.")
    except Exception as e:
      self.logger(f"[{target}] Web test error on port {port}: {e}")
    return
      
